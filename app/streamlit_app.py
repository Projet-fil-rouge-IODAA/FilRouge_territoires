import streamlit as st
from streamlit_image_comparison import image_comparison
from streamlit_cropper import st_cropper
from PIL import Image

st.set_page_config(
    page_title="Evolution de territoires",
    page_icon="üó∫Ô∏è",
    layout="wide",
)


def main():
    """
    The main function
    """
    # Main page
    col01, col02 = st.columns([0.8, 0.2], gap='medium')
    with col01:
        st.title("Caract√©risation de l'√©volution du territoire üó∫Ô∏è")
    with col02:
        st.image("../app/src/Logo_AgroParisTech.png", width=200)

    st.header("Un approache par clustering de series temporelles.")
    st.subheader("Projet fil Rouge - IODAA 2024.")
    st.markdown("**Auteurs**: Julian Agudelo, Malek Baroudi, \
                Nada Kassara, \
                Matthieu Verlynde, Afonso Ponce.")
    # Introduction
    st.header("Introduction")
    st.write("Cette application est un moyen simple de \
             visualiser et d'utiliser \
             les deux principales m√©thodologies qui ont √©t√© \
             d√©velopp√©es au cours de ce projet:")
    st.markdown(f"Un Syst√®me d'apprentissage de repr√©sentations pour le \
                clustering de s√©ries temporelles multivari√©es bas√© sur \
                [Time2feat](https://www.vldb.org/pvldb/vol16/p193-tiano.pdf).\
                \n\
                Un syst√®me de combinaison de clusterings bas√© sur \
                [Une approche de combinaison de clusterings bas√©e sur le vote it√©ratif] \
                (https://www.sciencedirect.com/science/article/pii/S131915781930597X).")
    st.write("Gr√¢ce √† ces deux approches, l'utilisateur peut obtenir \
             diff√©rentes propositions de groupes de pixels √† partir de \
             l'image satellite en fonction de l'√©volution temporelle.\
             \n \
             En utilisant cette application, l'utilisateur peut choisir \
             la zone s√ªr laquelle il souhaite ex√©cuter les algorithmes \
             de clustering ainsi que le nombre de clusters \
             qu'il souhaite g√©n√©rer.")

    # Utilisez les mod√®les
    st.header("Utilisez les mod√®les")
    col1, col2 = st.columns([1.1, 1], gap='small')

    with col1:
        st.subheader("Choisissez un r√©gion d'interet")
        img = Image.open("../app/src/crop_image.png")
        cropped_img, box = st_cropper(img, realtime_update=True, box_color='#0000FF',
                                 aspect_ratio=None, return_type='both')

        col11, col12 = st.columns(2, gap = 'small')
        with col11:
            _ = cropped_img.thumbnail((400, 200))
            st.image(cropped_img)
            st.write(str(box))
        with col12:
            st.write("")
            st.write(f"Taille originale: {img.size[0]}px, {img.size[1]}px")
            st.write(f"Taille de votre selection: {cropped_img.size[0]}px, {cropped_img.size[1]}px")
            st.write(f"Nombre de pixels dans votre selection: {cropped_img.size[0]*cropped_img.size[1]}")

    with col2:
        st.subheader("Choisissez le nombre de clusters et la m√©thode")
        n_clust = st.selectbox('S√©lectionnez le nombre de clusters: ',
                            ["Automatique", "Personnalis√©"])
        if n_clust == "Personnalis√©":
            n_clust = st.slider("", min_value=0, max_value=30)

        methode = st.selectbox('S√©lectionnez la m√©thodologie √† utiliser: ',
                    ["Time2feat", "Combinaison de clusterings"])
        if methode == "Time2feat":
             t2f_methode = st.selectbox('S√©lectionnez la m√©thode de clustering √† utiliser: ',
                    ["Hierarchique", "Kmeans"])
             t2f_methode = st.selectbox('S√©lectionnez la m√©thode de transformation: ',
                    ["Minmax", "Normalisation standard"])
        else:
            vote_methode = st.selectbox('S√©lectionnez la m√©thode √† utiliser: ',
                    ["DTW-Kmedoids", "UMap-HDBSCAN"])

        demo = st.checkbox("Mode d√©mo")

        executer = st.button("Ex√©cuter")

        if cropped_img.size[0]*cropped_img.size[1] > 1000:
                st.warning("La taille de votre selection est trop grande. \
                        Veuillez r√©duire la taille de votre selection.")

    if executer:
        st.subheader("Visualisez et analysez les r√©sultats")

        if not demo and cropped_img.size[0]*cropped_img.size[1] > 1000:
                st.error("La taille de votre selection est trop grande. \
                        Veuillez r√©duire la taille de votre selection. \
                        \n\
                        Mode d√©monstration activ√©.")
                demo = True
        if demo:
            img1="src/1000_pixels_422_399_base.png"
            img2="src/1000_pixels_422_399_t2f_KMeans_std_demo.png"
            methode, n_clust = "Time2feat", 3
        else:
            img1=cropped_img
            img2="../results/just_a_test.png"


        # Visualisation des r√©sultats
        image_comparison(
        img1=img1,
        img2=img2,
        label1="Image originale",
        label2="Image clusteris√©e",
        width=1000,
        starting_position=50,
        show_labels=True,
        make_responsive=True,
        in_memory=True,
        )

        st.markdown("**M√©thode**: "+methode+" \
                    \n\
                    **Nombre de clusters**: "+str(n_clust))


if __name__ == "__main__":
    main()
